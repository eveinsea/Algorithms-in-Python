21. Merge Two Sorted Lists <E> <F>

Merge two sorted linked lists and return it as a new sorted list. The new list should be made 
by splicing together the nodes of the first two lists. 

Example 1:
l1: 1 --> 2 --> 4
l2: 1 --> 2 --> 4
output: 1 --> 1 --> 2 --> 3 --> 4 --> 4
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: l1 = [], l2 = []
Output: []

Example 3:
Input: l1 = [], l2 = [0]
Output: [0]
 
Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

*Idea*
For two sorted linked lists, we only compare the nodes pair by pair along next pointers

Approach 1: two pointers, O(m+n), O(1)
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        #output list
        dummy = ListNode()
        curr = dummy
        
        while l1 and l2:
            if l1.val < l2.val:
                curr.next = l1
                l1 = l1.next
            else:
                curr.next = l2
                l2 = l2.next
            curr = curr.next
        if l1:
            curr.next = l1
        if l2:
            curr.next = l2
            
        return dummy.next
        
