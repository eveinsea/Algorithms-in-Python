339. Nested List Weight Sum <E> <M>

Given a nested list of integers, return the sum of all integers in the list weighted by their depth.
Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:
Input: [[1,1],2,[1,1]]
Output: 10 
Explanation: Four 1's at depth 2, one 2 at depth 1.

Example 2:
Input: [1,[4,[6]]]
Output: 27 
Explanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4*2 + 6*3 = 27.

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Hidden: 
#depth starts from 1
#notice input is a list, not a object of NestedInteger

*Idea*
Refer to LeetCode 341. Flatten Nested List Iterator, we can flatten a nested List with DFS or BFS
If we find the corresponding depth, we can calculate the weight sum easily

Approach 1: DFS/divide and conquer/recursion, O(n), O(h)
class Solution:
    def depthSum(self, nestedList: List[NestedInteger]) -> int:
        return self.depthSumHelper(nestedList, 1)
    
    def depthSumHelper(self, nestedList, depth):
        if not nestedList:
            return 0
        
        total = 0
        for item in nestedList:
            if item.isInteger():
                total += item.getInteger() * depth
            else:
                total += self.depthSumHelper(item.getList(), depth + 1)
        return total

Approach 2: DFS/iteration, O(n), O(n)
#the order of item (children) doesn't matter
class Solution:
    def depthSum(self, nestedList: List[NestedInteger]) -> int:
        if not nestedList:
            return 0
        
        total = 0
        stack = [(nestedList, 1)]
        while stack:
            lst, depth = stack.pop()
            for item in lst:
                if item.isInteger():
                    total += item.getInteger() * depth
                else:
                    stack.append((item.getList(), depth + 1))
        return total 

Approach 3: BFS + level + deque, O(n), O(w)
from collections import deque
class Solution:
    def depthSum(self, nestedList: List[NestedInteger]) -> int:
        if not nestedList:
            return 0
        
        total = 0
        dq = deque([nestedList])
        level = 1
        while dq:
            size = len(dq)
            for i in range(size):
                lst = dq.popleft()
                for item in lst:
                    if item.isInteger():
                        total += item.getInteger() * level
                    else:
                        dq.append(item.getList())
            level += 1
        return total
