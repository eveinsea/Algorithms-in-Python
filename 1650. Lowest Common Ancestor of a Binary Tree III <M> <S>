1650. Lowest Common Ancestor of a Binary Tree III <M> <S>

Given two nodes of a binary tree p and q, return their lowest common ancestor (LCA).
Each node will have a reference to its parent node. The definition for Node is below:
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}
According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q 
in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a 
descendant of itself)." 

Example 1:
           3
         /   \
        5     1
       / \   / \
      6   2 0   8
         / \
        7   4
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:
           3
         /   \
        5     1
       / \   / \
      6   2 0   8
         / \
        7   4
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to 
the LCA definition.

Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1
    1
   /
  2 

Constraints:
The number of nodes in the tree is in the range [2, 105].
-10^9 <= Node.val <= 10^9
All Node.val are unique.
p != q
p and q exist in the tree.

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Key point:
Each node will have a reference to its parent node

*Idea I*
Refer to Leetcode 236. Lowest Common Ancestor of a Binary Tree
convert the problem to find the intersection of two linked list (Leetcode 160)
There are three methods here:
(1) hashset, (2) discard leading nodes with counting, (3)exchange traverse

Approach 1: hashset, O(d), O(d)
class Solution:
    def lowestCommonAncestor(self, p: 'Node', q: 'Node') -> 'Node':
        hs = set()
        curr = p
        while curr:
            hs.add(curr)
            curr = curr.parent
        
        curr = q
        while curr not in hs:
            curr = curr.parent
        return curr

Approach 2: discard leading nodes with counting, O(d), O(1)
class Solution:
    def lowestCommonAncestor(self, p: 'Node', q: 'Node') -> 'Node':
        depthP = self.getDepth(p)
        depthQ = self.getDepth(q)
        
        currP, currQ = p, q
        diff = abs(depthP - depthQ)
        if depthP < depthQ:
            currP, currQ = currQ, currP
            
        #discard leading nodes
        while diff:
            currP = currP.parent
            diff -= 1
        
        #find intersection
        while currP != currQ:
            currP = currP.parent
            currQ = currQ.parent
        return currP
    
    def getDepth(self, node):
        n = 0
        while node:
            n += 1
            node = node.parent
        return n
        
Approach 3: exchange traverse, O(d), O(1)
class Solution:
    def lowestCommonAncestor(self, p: 'Node', q: 'Node') -> 'Node':
        return self.findIntersection(p, q)
            
    def findIntersection(self, head1, head2):
        curr1, curr2 = head1, head2
        while curr1 != curr2:
            if not curr1:
                curr1 = head2
            else:
                curr1 = curr1.parent
            if not curr2:
                curr2 = head1
            else:
                curr2 = curr2.parent
        return curr1        
