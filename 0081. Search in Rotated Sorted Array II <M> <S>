81. Search in Rotated Sorted Array II <M> <S>

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

Follow up:
This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Key points:
with duplicates
return True/False

*Idea*
Refer to LeetCode 33. Search in Rotated Sorted Array, Apporach 1
But with duplicates, when nums[left] = nums[mid], we can't determine which part to pick. in other word, 
thinking about left part is sorted under this condition may be wrong, because there may be 
nums[left] = nums[right] at the same time, eg. [1,1,1,1,1,0,1,1]
We need further check, discard enough duplicates until we can make the dicision

Approach 1: binary search + pivot, O(lgn)~O(n)
#key point: enable nums[mid] > nums[mid + 1] with specific conditions
class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        if not nums:
            return False
        
        pivot = self.findPivot(nums)
        if pivot == 0 or target < nums[0]:
            return self.binarySearch(nums, pivot, len(nums) - 1, target)
        else:
            return self.binarySearch(nums, 0, pivot - 1, target)
        
    def findPivot(self, nums):
        left, right = 0, len(nums) - 1    
        while left <= right:
            mid = left + (right - left) // 2
            if mid < len(nums) - 1 and nums[mid] > nums[mid + 1]:
                return mid + 1
            while left <= mid and nums[left] == nums[mid]:
                left += 1
            if left == mid + 1:
                continue
            if nums[left] < nums[mid]:
                left = mid + 1
            else:
                right = mid - 1
        return 0
            
    def binarySearch(self, nums, left, right, target):
        while left <= right:
            mid = left + (right - left) // 2
            if nums[mid] == target:
                return True
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        return False

Approach 2: binary search, O(lgn)~O(n)
class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        if not nums:
            return False
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = left + (right - left) // 2
            if nums[mid] == target:
                return True
            while left <= mid and nums[left] == nums[mid]:
                left += 1
            if left == mid + 1:
                continue
            if nums[left] <= nums[mid]:
                if nums[left] <= target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        return False

Follow up:
As we can see, by having duplicate elements in the array, we often miss the opportunity to apply binary 
search in certain search spaces. Hence, we get O(N) worst case (with duplicates) vs O(logN) best case 
complexity (without duplicates).
