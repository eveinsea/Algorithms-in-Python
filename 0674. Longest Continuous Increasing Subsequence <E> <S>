674. Longest Continuous Increasing Subsequence <E> <S>

Given an unsorted array of integers nums, return the length of the longest continuous increasing 
subsequence (i.e. subarray). The subsequence must be strictly increasing.
A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is 
[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1]. 

Example 1:
Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are 
separated by element 4.

Example 2:
Input: nums = [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must 
be strictly increasing. 

Constraints:
0 <= nums.length <= 10^4
-10^9 <= nums[i] <= 10^9

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Key points:
#continuous subsequence <==> subarray
#strictly increasing

*Idea I*
Find the longest subarray which is increasing
if one item is in a subarray, only related to the item in front of it. We think of DP naturally

Approach 1: DP + 1D-array, O(n), O(n)
class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        if not nums:
            return 0
        
        n = len(nums)
        longest = 1
        DP = [1] * n
        for i in range(1, n):
            if nums[i] > nums[i - 1]:
                DP[i] = 1 + DP[i - 1]
                longest = max(longest, DP[i])
            #else:
            #    DP[i] = 1
        return longest
    
Approach 2: DP + running variable, O(n), O(1)
class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        if not nums:
            return 0
        
        longest = 1
        length = 1
        prev = 1
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                length = prev + 1
                longest = max(longest, length)
            else:
                length = 1
            prev = length
        return longest

*Idea II*
Imagine a polyline represent every item in the array, the increasing subarray is the line from valley to peak
find every climing up line and choose the longest one

Approach 3: Greedy/polyline (valley and peak)        
class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        if not nums:
            return 0
        
        longest = 1
        length = 1
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                length += 1
                longest = max(longest, length)
            else:
                length = 1
        return longest
