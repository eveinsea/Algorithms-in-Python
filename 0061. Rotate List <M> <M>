61. Rotate List <M> <M>

Given the head of a linked list, rotate the list to the right by k places. 

Example 1: 
          1 --> 2 --> 3 --> 4 --> 5
rotate 1: 5 --> 1 --> 2 --> 3 --> 4
rotate 2: 4 --> 5 --> 1 --> 2 --> 3
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:
          0 --> 1 --> 2
rotate 1: 2 --> 0 --> 1
rotate 2: 1 --> 2 --> 0
rotate 3: 0 --> 1 --> 2
rotate 4: 2 --> 0 --> 1
Input: head = [0,1,2], k = 4
Output: [2,0,1]
 
Constraints:
The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 10^9

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

*Idea*
If it's a cycle, the head will move forward (head --> tail) k steps in the cycle
When the rotation stop, the node in the position of original head will be the new head
In other words, when we move backward (tail --> head) in the cycle, after k steps, we arrive at new head
That means, when we move forward xN - k steps, we arrive at new head, N is the length of this cycle
N is the key point here

Approach 1: count + cycle, O(n), O(1)
class Solution:
    def rotateRight(self, head: ListNode, k: int) -> ListNode:
        if not head or not k:
            return head
        
        #find the length and tail node
        n = 1           #start from head
        curr = head
        while curr and curr.next:
            curr = curr.next
            n += 1
        
        #make cycle
        curr.next = head
        
        #find the new head and cut the cycle
        k = n - k % n
        prev, curr = None, head
        while k:
            prev = curr
            curr = curr.next
            k -= 1
        prev.next = None
        
        return curr
        
Approach 2: count + no cycle
class Solution:
    def rotateRight(self, head: ListNode, k: int) -> ListNode:
        if not head or not head.next:
            return head
            
        tail = head
        n = 1
        while tail.next != None:
            tail = tail.next
            n += 1
            
        k %= n
        if k == 0:
            return head
            
        step = n - k
        prev, curr = None, head
        while step > 0:
            prev = curr
            curr = curr.next
            step -= 1
            
        #re-construct the linked list    
        tail.next = head
        prev.next = None
        return curr


