673. Number of Longest Increasing Subsequence <M> <S>

Given an integer array nums, return the number of longest increasing subsequences.
Notice that the sequence has to be strictly increasing. 

Example 1:
Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].

Example 2:
Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 
subsequences' length is 1, so output 5.
 
Constraints:
1 <= nums.length <= 2000
-10^6 <= nums[i] <= 10^6

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Key point: strictly increasing

*Idea*
Refer to LeetCode 300. Longest Increasing Subsequence
DP[i] record the length of LISes which end with nums[i]
use a new array count[i] record the number of LISes which end with nums[i]
count the LIS during the process of find LIS, two conditions will contribute to it:
(1) the new generated increasing subsequence has the same length to the current LIS
    count[i] += count[j], j < i and nums[j] < nums[i] and DP[j] + 1 = DP[i]
(2) the new generated increasing subsequence has larger length than the current LIS
    update DP[i], DP[i] = DP[j] + 1
    reset count[i], count[i] = count[j]
#key point: 
#(1)global longest should be update with bigger number
#(2)there may be multiple candidates which have longest LISes with different end item
class Solution:
    def findNumberOfLIS(self, nums: List[int]) -> int:
        if not nums:
            return 0
        
        n = len(nums)
        longest = 1
        DP = [1] * n
        count = [1] * n
        for i in range(n):
            for j in range(i):
                if nums[j] < nums[i]:
                    #if exist longer LIS
                    if 1 + DP[j] > DP[i]:
                        DP[i] = 1 + DP[j]
                        longest = max(longest, DP[i])
                        count[i] = count[j]
                    #if exist LIS with the same length to longest 
                    elif 1 + DP[j] == DP[i]:
                        count[i] += count[j]
        return sum([count[i] for i in range(n) if DP[i] == longest])    
