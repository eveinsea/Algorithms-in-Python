128. Longest Consecutive Sequence <H> <F>

Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

Follow up: Could you implement the O(n) solution?  

Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9 

Constraints:
0 <= nums.length <= 10^4
-10^9 <= nums[i] <= 10^9

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Definition:
consecutive sequence: keep the relative order of original sequence and subseq[i] + 1 = subseq[i+1]
consecutive elements sequence: the order doesn't matter

*Idea I*
sort the sequence, then find consecutive sequence from it and record the length

Approach 1: backtrack + sort, O(2^n), O(n), TLE
#Notice that 'if not last' can not distinguish 0 and None
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if not nums:
            return 0
        
        self.longest = 1
        nums.sort()
        self.longestConHelper(nums, 0, None, 0)
        return self.longest
    
    def longestConHelper(self, nums, idx, last, length):
        if idx == len(nums):
            self.longest = max(self.longest, length)
            return
        
        if last == None or nums[idx] == last + 1:
            self.longestConHelper(nums, idx + 1, nums[idx], length + 1)
        self.longestConHelper(nums, idx + 1, last, length)

Approach 2: sort + DP + 1D array, O(nlgn), O(n)
#[1,2,0,1] --> [0,1,1,2]
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if not nums:
            return 0      
        
        nums.sort()
        
        n = len(nums)
        dp = [1] * n
        longest = 1
        for i in range(1, n):
            if nums[i] == nums[i - 1] + 1:
                dp[i] = dp[i - 1] + 1
                longest = max(longest, dp[i])
            elif nums[i] == nums[i - 1]:
                dp[i] = dp[i - 1]
        return longest

Approach 3: DP + variable, O(nlgn), O(1)
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if not nums:
            return 0      
        
        nums.sort()
        
        n = len(nums)
        longest = 1
        length = 1
        for i in range(1, n):
            if nums[i] == nums[i - 1]:
                continue
            if nums[i] == nums[i - 1] + 1:
                length += 1
                longest = max(longest, length)
            else:
                length = 1
        return longest
        
*Idea II*
hashset can help us lookup with cost O(1)
start from every item in nums, we can extend the consecutive sequence with finding next item in hashset

Approach 4: hashset, O(n^2), O(n)
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if not nums:
            return 0  
        
        hs = set(nums)
        longest = 1
        for num in nums:
            curr = num
            length = 1
            while curr + 1 in hs:
                length += 1
                curr += 1
            longest = max(longest, length)
        return longest
        
*Idea III*
try to optimize Approach 4 from the outer loop
If the item - 1 exist in hashset, it won't be the start item of the longest consecutive sequence

Approach 5: greedy + hashset, O(n), O(n)
Although the time complexity appears to be quadratic due to the while loop nested within the for loop, 
closer inspection reveals it to be linear. Because the while loop is reached only when currentNum marks 
the beginning of a sequence (i.e. currentNum-1 is not present in nums), the while loop can only run for 
n iterations throughout the entire runtime of the algorithm. This means that despite looking like O(n⋅n) 
complexity, the nested loops actually run in O(n + n) = O(n) time. All other computations occur in 
constant time, so the overall runtime is linear.
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if not nums:
            return 0  
        
        hs = set(nums)
        longest = 1
        for num in hs:
            #find a starting num
            if num - 1 not in hs:
                curr = num
                length = 1
                while curr + 1 in hs:
                    length += 1
                    curr += 1
                longest = max(longest, length)
        return longest
