23. Merge k Sorted Lists <H> <F>

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
Merge all the linked-lists into one sorted linked-list and return it. 

Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:
Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: [] 

Constraints:
k == lists.length
0 <= k <= 10^4
0 <= lists[i].length <= 500
-10^4 <= lists[i][j] <= 10^4
lists[i] is sorted in ascending order.
The sum of lists[i].length won't exceed 10^4.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

*Idea I*
Make use of LeetCode 21. Merge Two Sorted Lists
Merge the lists one by one, we need (k - 1) times of merge and it will cost O(nk)
May we reduce the times of merge?
Think about two data structures composing of the same nodes:
A: 1 --> 2 --> 3 --> 4 --> 5 --> 6 --> 7
B:                  1
                  /   \
                 2     3
                / \   / \
               4   5 6   7
The times of merge is equal to the number of internal nodes, so
Merge_A = k - 1, Merge_B = lgk, Merge_A > Merge_B

Approach 1: divide and conquer/recursion + index range, O(nlgk), O(lgk)
#k = len(lists)
#n is the total number of nodes in all lists.
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        return self.mergeKHelper(lists, 0, len(lists) - 1)
    
    def mergeKHelper(self, lists, left, right):
        if left > right:
            return None
        if left == right:
            return lists[left]
        
        mid = left + (right - left) // 2
        list1 = self.mergeKHelper(lists, left, mid)
        list2 = self.mergeKHelper(lists, mid + 1, right)
        return self.merge2Lists(list1, list2)
    
    def merge2Lists(self, list1, list2):
        dummy = ListNode()
        curr = dummy
        while list1 and list2:
            if list1.val < list2.val:
                curr.next = list1
                list1 = list1.next
            else:
                curr.next = list2
                list2 = list2.next
            curr = curr.next
        if list1:
            curr.next = list1
        if list2:
            curr.next = list2
            
        return dummy.next

Approach 2: divide and conquer/iteration, O(nlgk), O(1)
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        if not lists:
            return None
        k = len(lists)
        while k > 1:
            origK = k
            k = ceil(k / 2)
            for i in range(k):
                if i + k < origK:
                    lists[i] = self.merge2Lists(lists[i], lists[i + k])
        return lists[0]
        
    def merge2Lists(self, list1, list2):
        dummy = ListNode()
        curr = dummy
        while list1 and list2:
            if list1.val < list2.val:
                curr.next = list1
                list1 = list1.next
            else:
                curr.next = list2
                list2 = list2.next
            curr = curr.next
        if list1:
            curr.next = list1
        if list2:
            curr.next = list2
            
        return dummy.next

*Idea II*
May we reduce the cost of each merge?
Use heap to sort the nodes in lg(k)
Notice that heap can't compare the self-defined data structure 'ListNode'

Approach 3: heap + index, O(nlgk), O(k)
from heapq import heappush, heappop
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        if not lists:
            return None
        
        #initialize heap with the first node in each list if it exists
        hp = []
        for i in range(len(lists)):
            if lists[i]:
                heappush(hp, (lists[i].val, i))
                
        dummy = ListNode()
        curr = dummy
        while hp:
            val, idx = heappop(hp)
            curr.next = lists[idx]
            curr = lists[idx]
            lists[idx] = lists[idx].next        #update lists[idx] to next node
            if lists[idx]:
                heappush(hp, (lists[idx].val, idx))
        return dummy.next               
        
Approach 4: heap + override, O(nlgk), O(k)
from heapq import heappush, heappop
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        if not lists:
            return None
        
        #override
        ListNode.__lt__ = lambda x, y: True if x.val < y.val else False
        
        #initialize heap with the first node in each list if it exists
        hp = []
        for lst in lists:
            if lst:
                heappush(hp, (lst.val, lst))
                
        dummy = ListNode()
        curr = dummy
        while hp:
            val, lst = heappop(hp)
            curr.next = lst
            curr = lst
            lst = lst.next
            if lst:
                heappush(hp, (lst.val, lst))
        return dummy.next
