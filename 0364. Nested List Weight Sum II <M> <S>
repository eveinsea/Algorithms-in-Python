364. Nested List Weight Sum II <M> <S>

Given a nested list of integers, return the sum of all integers in the list weighted by their depth.
Each element is either an integer, or a list -- whose elements may also be integers or other lists.
Different from the previous question where weight is increasing from root to leaf, now the weight is 
defined from bottom up. i.e., the leaf level integers have weight 1, and the root level integers have 
the largest weight.

Example 1:
Input: [[1,1],2,[1,1]]
Output: 8 
Explanation: Four 1's at depth 1, one 2 at depth 2.

Example 2:
Input: [1,[4,[6]]]
Output: 17 
Explanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 1*3 + 4*2 + 6*1 = 17.

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

*Idea I*
Refer to LeetCode 339. Nested List Weight Sum, 
(1)if we get the max depth of the nestedList in advance, we can calculate the weight sum with reverse 
depth (max_depth - depth), but it need an extra O(n) traverse.
(2)Of course we can calculate the total in each level/depth. After we traverse the nestedList and get 
the max depth, we add the weight sum according to reverse depth. It cost an extra O(d).

Approach 1: BFS + reversed depth, O(n), O(n)
from collections import deque
class Solution:
    def depthSumInverse(self, nestedList: List[NestedInteger]) -> int:
        if not nestedList:
            return 0
        
        levelSum = deque()
        dq = deque(nestedList)
        while dq:
            size = len(dq)
            subtotal = 0
            for _ in range(size):
                item = dq.popleft()
                if item.isInteger():
                    subtotal += item.getInteger()
                else:
                    dq += item.getList()
            levelSum.appendleft(subtotal)
            
        total = 0
        for depth, levelTotal in enumerate(levelSum):
            total += (depth + 1) * levelTotal
        return total

*Idea II*
May we calculate the weight sum with reversed depth during traverse?
Observe this example,
#[1,[4,[6]]] = 1*3 + 4*2 + 6*1 = 17
#[1,[4,[6]]] = 1*1 + [4,[6]] 
#            = 1*1 + (1*1 + 4*1 + [6]) 
#            = 1*1 + (1*1 + 4*1 + (1*1 + 4*1 + 6*1))
#key point1: the cumulative total of uplevel will be added up again in next level
#[[1,1],2,[1,1]] = (1+1)*1 + 2*2 + (1+1)*1 = 8
#                = [1,1] + 2*1 + [1,1]
#                = [1,1] + [1,1] + 2*1
#                = (1*1 + 1*1 + 1*1 + 1*1 + 2*1) + 2*1
#key point2: the total will only be added up once in the same level


Approach 2: DFS/divide and conquer, cumulative sum of level, O(n), O(n)
class Solution:
    def depthSumInverse(self, nestedList: List[NestedInteger]) -> int:
        return self.depthSumHelper(nestedList, 0)
    
    def depthSumHelper(self, nestedList, total):
        if not nestedList:
            return 0
        
        currTotal = 0
        nxtList = []
        for item in nestedList:
            if item.isInteger():
                currTotal += item.getInteger()
            else:
                nxtList += item.getList()
        nxtTotal = self.depthSumHelper(nxtList, total + currTotal)
        return total + currTotal + nxtTotal

Approach 3: BFS, cumulative sum of level, O(n), O(n)
#levelTotal is the cumulative sum of each level from root to current level (including integer only)
from collections import deque
class Solution:
    def depthSumInverse(self, nestedList: List[NestedInteger]) -> int:
        if not nestedList:
            return 0
        
        total = 0
        levelTotal = 0
        dq = deque(nestedList)      #convert list to deque
        while dq:
            size = len(dq)
            for _ in range(size):
                item = dq.popleft()
                if item.isInteger():
                    levelTotal += item.getInteger()
                else:
                    dq += item.getList()
            total += levelTotal
        return total
