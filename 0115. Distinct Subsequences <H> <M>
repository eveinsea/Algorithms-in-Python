115. Distinct Subsequences <H> <M>

Given two strings s and t, return the number of distinct subsequences of s which equals t.

A string's subsequence is a new string formed from the original string by deleting some 
(can be none) of the characters without disturbing the relative positions of the remaining 
characters. (i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).

It's guaranteed the answer fits on a 32-bit signed integer. 

Example 1:
Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from S.
rabb(b)it
rab(b)bit
ra(b)bbit

Example 2:
Input: s = "babgbag", t = "bag"
Output: 5
Explanation:
As shown below, there are 5 ways you can generate "bag" from S.
ba(b)g(bag)
ba(bgba)g
b(abgb)ag
(ba)b(gb)ag
(babg)bag 

Constraints:
0 <= s.length, t.length <= 1000
s and t consist of English letters.

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

*Idea*
Refer to LeetCode 392. Is Subsequence
The difference is that we consider the subsequences generate by character from different locations 
as distinct subsequences, even though they are consisting of the same characters

Approach 1: backtrack/divide and conquer, loc by loc, O(2^m), O(m), TLE
#LeetCode 78. Subsets
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        return self.distinctSeq(s, t, 0, 0)
    
    def distinctSeq(self, s, t, ps, pt):
        if pt == len(t):
            return 1
        
        count = 0
        for i in range(ps, len(s)):
            if s[i] == t[pt]:
                count += self.distinctSeq(s, t, i + 1, pt + 1)
        return count

Approach 2: backtrack/divide and conquer loc by loc + caching, O(mn), O(mn)
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        self.hm = {}
        return self.distinctSeq(s, t, 0, 0)
    
    def distinctSeq(self, s, t, ps, pt):
        if pt == len(t):
            return 1
        
        if (ps, pt) in self.hm:
            return self.hm[(ps, pt)]
        
        count = 0
        for i in range(ps, len(s)):
            if s[i] == t[pt]:
                count += self.distinctSeq(s, t, i + 1, pt + 1)
        self.hm[(ps, pt)] = count
        return self.hm[(ps, pt)]    

Approach 3: backtrack/divide and conquer item by item + caching, O(mn), O(mn)
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        self.hm = {}
        return self.distinctSeq(s, t, 0, 0)
    
    def distinctSeq(self, s, t, ps, pt):
        if pt == len(t):
            return 1
        if ps == len(s):
            return 0
        
        if (ps, pt) in self.hm:
            return self.hm[(ps, pt)]
        
        count = self.distinctSeq(s, t, ps + 1, pt)
        if s[ps] == t[pt]:
            count += self.distinctSeq(s, t, ps + 1, pt + 1)
        self.hm[(ps, pt)] = count
        return self.hm[(ps, pt)]    

Approach 4: DP + 2D array, O(mn), O(mn)
#different from LeetCode 392. Is Subsequence  
#dp[i][j] store the number of matched subsequence between s[i:] and t[j:]
#key point: if not t and s: return True --> count 1
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        m, n = len(s), len(t)
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        for i in range(m + 1):
            dp[i][n] = 1
        for i in reversed(range(m)):
            for j in reversed(range(n)):
                #(1) s[i] is not included
                dp[i][j] = dp[i + 1][j]
                #(2) s[i] is included
                if s[i] == t[j]:
                    dp[i][j] += dp[i + 1][j + 1]
        return dp[0][0]

Approach 5: DP + running 1D array, O(mn), O(n)
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        m, n = len(s), len(t)
        dp = [0] * (n + 1)
        dp[-1] = 1
        for i in reversed(range(m)):
            tmp = [0] * (n + 1)
            tmp[-1] = 1
            for j in reversed(range(n)):
                tmp[j] = dp[j]
                if s[i] == t[j]:
                    tmp[j] += dp[j + 1]
            dp = tmp
        return dp[0]
