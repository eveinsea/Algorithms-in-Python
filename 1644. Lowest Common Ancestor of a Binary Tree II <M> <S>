1644. Lowest Common Ancestor of a Binary Tree II <M> <S>

Given the root of a binary tree, return the lowest common ancestor (LCA) of two given nodes, p and q. 
If either node p or q does not exist in the tree, return null. All values of the nodes in the tree 
are unique.
According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q in 
a binary tree T is the lowest node that has both p and q as descendants (where we allow a node to be 
a descendant of itself)". A descendant of a node x is a node y that is on the path from node x to some 
leaf node.

Example 1:
           3
         /   \
        5     1
       / \   / \
      6   2 0   8
         / \
        7   4
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:
           3
         /   \
        5     1
       / \   / \
      6   2 0   8
         / \
        7   4
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5. A node can be a descendant of itself according to the 
definition of LCA.

Example 3:
           3
         /   \
        5     1
       / \   / \
      6   2 0   8
         / \
        7   4
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10
Output: null
Explanation: Node 10 does not exist in the tree, so return null.
 
Constraints:
The number of nodes in the tree is in the range [1, 104].
-10^9 <= Node.val <= 10^9
All Node.val are unique.
p != q 

Follow up: Can you find the LCA traversing the tree, without checking nodes existence?

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Key point:
p or q may not exist in the tree

*Idea I*
Refer to LeetCode 236. Lowest Common Ancestor of a Binary Tree
the approaches with parent pointer work well here
(1) find target nodes p and q
(2) find their parents set
(3) find the first same node (bottom-up) in the two parent set of p and q
Approach 1: refer to LeetCode 236 Approach 1
Approach 2: refer to LeetCode 236 Approach 2

Follow up: Can you find the LCA traversing the tree, without checking nodes existence?
*Idea II*
Refer to LeetCode 236. Lowest Common Ancestor of a Binary Tree, It can't work here.
Because p or q may not exist in the tree, we can't make sure it's the LCA when we find only one target 
node after we traverse the entire tree. It may be 
(1) the LCA (both p and q exist, and p, q are in the same root-to-leaf path)
(2) only one target node exist, no LCA
In order to determine if both target nodes exist, we have to check nodes existence

Approach 3: DFS/divide and conquer, check existence during recursion, O(n), O(n)
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.ans = None
        self.LCAHelper(root, p, q)
        return self.ans
    
    def LCAHelper(self, root, p, q):
        if not root:
            return False
        
        left = self.LCAHelper(root.left, p, q)
        right = self.LCAHelper(root.right, p, q)
        middle = root.val == p.val or root.val == q.val
        if left + middle + right >= 2:    #check existence
            self.ans = root
        return left or middle or right
        
Approach 4: DFS/divide and conquer, check existence with flag, O(n), O(n)
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.pFound = False
        self.qFound = False
        ans = self.LCAHelper(root, p, q)
        return self.pFound and self.qFound and ans      #check before return
    
    def LCAHelper(self, root, p, q):
        if not root:
            return None
        
        left = self.LCAHelper(root.left, p, q)
        right = self.LCAHelper(root.right, p, q)
        if root.val == p.val:
            self.pFound = True
            return root
        if root.val == q.val:
            self.qFound = True
            return root        
        if left and right:
            return root
        return left if left else right
        
Approach 5: DFS/divide and conquer, check existence with count, O(n), O(n)
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.count = 0
        ans = self.LCAHelper(root, p, q)
        return self.count == 2 and ans      #check before return
    
    def LCAHelper(self, root, p, q):
        if not root:
            return None
        
        left = self.LCAHelper(root.left, p, q)
        right = self.LCAHelper(root.right, p, q)
        if root.val == p.val or root.val == q.val:
            self.count += 1
            return root     
        if left and right:
            return root
        return left if left else right        
        
*Idea III*
Make use of Eulerian Tour
(1) Traverse the graph visiting root, left, root, right, root to make a Euler Path
(2) Return the node (LCA) that is at the lowest depth between p and q in the Euler Path

Approach 6: Eulerian Tour
https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-ii/discuss/923721/Python-Eulerian-Tour-with-pictures

