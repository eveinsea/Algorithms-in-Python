160. Intersection of Two Linked Lists

Write a program to find the node at which the intersection of two singly linked lists begins.

For example, the following two linked lists:
A:         a1 --> a2 --> |
                         c1 --> c2 --> c3
B:  b1 --> b2 --> b3 --> |
begin to intersect at node c1.

Example 1:
A:        4 --> 1 --> |
                      8 --> 4 --> 5
B:  5 --> 6 --> 1 --> |
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). 
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes 
before the intersected node in A; There are 3 nodes before the intersected node in B.
 
Example 2:
A:  1 --> 9 --> 1 --> |
                      2 --> 4
B:              3 --> |
Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Reference of the node with value = 2
Input Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). 
From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before 
the intersected node in A; There are 1 node before the intersected node in B.
 

Example 3:
A:  2 --> 6 --> 4

B:  1 --> 5
Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: null
Input Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two 
lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null. 

Notes:
If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Each value on each linked list is in the range [1, 10^9].
Your code should preferably run in O(n) time and use only O(1) memory.

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Idea:
When we check two linked lists of the same length and compare the pairs of nodes at the same position one-to-one, 
we must be able to find the intersection if it exists.
If the lengths of the two linked lists are different, how to find such a starting node (make the sublists the same 
length)? This is the key to this question.
If there is an intersection in the two linked lists (no cycle), the sublists after the intersection will be the 
same (in terms of node, length, etc.) This means that at the beginning, the extra nodes in the longer linked list 
must not be the intersection and we can discard them.

Solutions:
Approach 1: discard the leading nodes with counting, two pointers, O(m+n), O(1)
class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        if not headA or not headB:
            return None
            
        #counting the length of the linked list
        lenA = self.get_length(headA)
        lenB = self.get_length(headB)
        
        #discard the leading nodes
        currA, currB = headA, headB
        if lenA < lenB:
            currA, currB = currB, currA
            lenA, lenB = lenB, lenA
        k = lenA - lenB
        while k:
            currA = currA.next
            k -= 1
            
        #find the intersection if it exists
        while currA and currB:
            if currA == currB:
                return currA
            else:
                currA = currA.next
                currB = currB.next
        return None
        
    def get_length(self, head):
        n = 0
        curr = head
        while curr:
            n += 1
            curr = curr.next
        return n
        
Approach 2: exchange traversal, two pointers, O(m+n), O(1)
Assume listA is longer than listB in general, we have two lists M, N:
M = listA + listB
N = listB + listA
When we traverse list M and N at the same time, after we move x steps (x = len(listA)),
the pointer of M will stay on the first node of listB,
the pointer of N will stay on the specific node of listA which makes the sublist after it be the same to listB in length.
Then we return to process the problem of finding the intersection in two linked list with same length.
class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        if not headA or not headB:
            return None
        
        pointerA, pointerB = headA, headB
        while pointerA != pointerB:
            if pointerA:
                pointerA = pointerA.next
            else:
                pointerA = headB
                
            if pointerB:
                pointerB = pointerB.next
            else:
                pointerB = headA
        return pointerA
