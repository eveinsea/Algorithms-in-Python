1143. Longest Common Subsequence <M> <M>

Given two strings text1 and text2, return the length of their longest common subsequence.

A subsequence of a string is a new string generated from the original string with some characters
(can be none) deleted without changing the relative order of the remaining characters. (eg, "ace" 
is a subsequence of "abcde" while "aec" is not). A common subsequence of two strings is a subsequence 
that is common to both strings. 

If there is no common subsequence, return 0. 

Example 1:
Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Example 2:
Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.

Example 3:
Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0. 

Constraints:
1 <= text1.length <= 1000
1 <= text2.length <= 1000
The input strings consist of lowercase English characters only.

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

*Idea*
Similar to LeetCode 392. Is Subsequence
The difference is in LC 392, there is a source string and a target string
But in this problem, both text1 and text2 can be source or target

Approach 1: backtracking, O(2^(m+n)), O(mn), TLE
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        self.longest = 0
        self.commSubseqHelper(text1, text2, 0, 0, 0)
        return self.longest
    
    def commSubseqHelper(self, s, t, ps, pt, length):
        if ps == len(s) or pt == len(t):
            self.longest = max(self.longest, length)
            return
        
        if s[ps] == t[pt]:
            self.commSubseqHelper(s, t, ps + 1, pt + 1, length + 1)
        else:
            self.commSubseqHelper(s, t, ps, pt + 1, length)
            self.commSubseqHelper(s, t, ps + 1, pt, length)

Approach 2: backtrack + caching, O(mn), O(mn)
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        self.hm = {}
        return self.commSubseqHelper(text1, text2, 0, 0)
    
    def commSubseqHelper(self, s, t, ps, pt):
        if ps == len(s) or pt == len(t):
            return 0
        
        if (ps, pt) in self.hm:
            return self.hm[(ps, pt)]
        
        length = 0
        if s[ps] == t[pt]:
            length = self.commSubseqHelper(s, t, ps + 1, pt + 1) + 1
        else:
            length = max(self.commSubseqHelper(s, t, ps, pt + 1), self.commSubseqHelper(s, t, ps + 1, pt))
        self.hm[(ps, pt)] = length
        return length
        
Approach 3: DP + 2D array, O(mn), O(mn)
#we calculate the number of matched characters until s[:i] and t[:j] with dp
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m, n = len(text1), len(text2)
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if text1[i - 1] == text2[j - 1]:    #i-1, j-1
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        return dp[-1][-1]

Approach 4: DP + 1D array, O(mn), O(n)
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m, n = len(text1), len(text2)
        dp = [0] * (n + 1)
        for i in range(1, m + 1):
            tmp = [0] * (n + 1)
            for j in range(1, n + 1):
                if text1[i - 1] == text2[j - 1]:
                    tmp[j] = dp[j - 1] + 1
                else:
                    tmp[j] = max(dp[j], tmp[j - 1])
            dp = tmp
        return dp[-1]   
