1676. Lowest Common Ancestor of a Binary Tree IV <M> <S>

Given the root of a binary tree and an array of TreeNode objects nodes, return the lowest common 
ancestor (LCA) of all the nodes in nodes. All the nodes will exist in the tree, and all values of 
the tree's nodes are unique.
Extending the definition of LCA on Wikipedia: "The lowest common ancestor of n nodes p1, p2, ..., pn 
in a binary tree T is the lowest node that has every pi as a descendant (where we allow a node to be 
a descendant of itself) for every valid i". A descendant of a node x is a node y that is on the path 
from node x to some leaf node.

Example 1:
           3
         /   \
        5     1
       / \   / \
      6   2 0   8
         / \
        7   4
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [4,7]
Output: 2
Explanation: The lowest common ancestor of nodes 4 and 7 is node 2.

Example 2:
           3
         /   \
        5     1
       / \   / \
      6   2 0   8
         / \
        7   4
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [1]
Output: 1
Explanation: The lowest common ancestor of a single node is the node itself.

Example 3:
           3
         /   \
        5     1
       / \   / \
      6   2 0   8
         / \
        7   4
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [7,6,2,4]
Output: 5
Explanation: The lowest common ancestor of the nodes 7, 6, 2, and 4 is node 5.

Example 4:
           3
         /   \
        5     1
       / \   / \
      6   2 0   8
         / \
        7   4
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [0,1,2,3,4,5,6,7,8]
Output: 3
Explanation: The lowest common ancestor of all the nodes is the root node.
 
Constraints:
The number of nodes in the tree is in the range [1, 104].
-10^9 <= Node.val <= 10^9
All Node.val are unique.
All nodes[i] will exist in the tree.
All nodes[i] are distinct.

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Key points:
All nodes[i] will exist in the tree.
All nodes[i] are distinct.

*Idea I*
Because all nodes exist int the tree, we don't have to check the existence and can return early

Approach 1: DFS/divide and conquer + early return + hashset, O(n), O(n)
Refer to LeetCode 236. Lowest Common Ancestor of a Binary Tree (Approach 3)
early return, only consider the highest ancestor when target nodes exist in the decedant
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', nodes: 'List[TreeNode]') -> 'TreeNode':
        hs = set(nodes)
        return self.LCAHelper(root, hs)
    
    def LCAHelper(self, root, hs):
        if not root:
            return None
        if root in hs:
            return root
        left = self.LCAHelper(root.left, hs)
        right = self.LCAHelper(root.right, hs)
        if left and right:
            return root
        return left if left else right

*Idea II*
With parent pointer, we can find the LCA of all nodes, but it will cost O(dk), O(k) (k pathes for k nodes)
Refer to LeetCode 236. Lowest Common Ancestor of a Binary Tree (Approach 1, Approach 2)

*Idea III*
DFS/divide and conquer + checking existenct with global ans/flag/count, no early return
Refer to LeetCode 1644. Lowest Common Ancestor of a Binary Tree II, Approach 3 ~ Approach 5
